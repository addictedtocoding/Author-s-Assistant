package authorslilhelper;
//package login;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXMLLoader;
import javafx.geometry.Pos;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.input.MouseDragEvent;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import javafx.stage.Modality;
import javafx.stage.Stage; //reset, onChapter, prewritingCounter; filetracker zoom emptytrashcan refresh

//office supp stre nxt to dist (dr around), put away cl's, s-c freedom
/**
 *
 * @author Quiggy
 */
public class AuthorsLilHelper extends Application {

    private FXMLDocumentController lemmeAccessThis;
    private FXMLDocumentController anything;
    //public FXMLDocumentController public void initializeExistingUser(final Stage d);
    private Label label;
    public Label title;
   // public Button button;
   // public ListView list;
  // public JTextArea Primary;
   public TextArea Primary;
   // public ScrollBar scroll;
   String fileLocation = ""; 
   boolean existingUser = false;
   String enteredUsername = "";
   String enteredPassword = "";
   String enteredMasterPath = "";
   Stage d;
   ListView chaptersList;
   boolean showMainStage;
   public String installationPath = System.getProperty("user.home") + "/alhusers";
   
   /*public void showMain( Stage stage)
   {
                try{
                    Parent root2;
                root2 = FXMLLoader.load(getClass().getResource("FXMLDocument.fxml"));
             Scene scene2 = new Scene(root2);
             stage.setTitle("Author's Lil Helper");
             stage.setScene(scene2);
             stage.show();}catch(Exception e){}
                
   }*/
   
    @Override
    public void start(final Stage stage) throws Exception {
     
        Parent root;
        root = FXMLLoader.load(getClass().getResource("FXMLDocument.fxml"));
        Scene scene2 = new Scene(root);
        stage.setTitle("Author's Lil Helper");
        stage.setScene(scene2);
        stage.show();
        
        stage.toBack();
        
        
        File userFolder = new File(installationPath);

          // if the directory does not exist, create it
          if (!userFolder.exists()) 
          {
               //System.out.println("creating directory: " + directoryName);
	       //boolean result = false;

            	try
             	{
                	userFolder.mkdir();
                        System.out.println("directory created");
                	
             	} 
            	catch(Exception e)
             	{
                	//handle it
                    System.out.println("an exception");
             	}        
             	
          }
          
                 
          try
          {
              File usersListFile = new File(installationPath + "/users.txt");
              FileWriter writer = new FileWriter(usersListFile, true);	        
              BufferedWriter bufferedwriter = new BufferedWriter(writer);
              writer.append("");
              bufferedwriter.close();
              writer.close();
          }
          catch(Exception e)
          {}
    
                  File userData = new File(installationPath + "/userdata");

          // if the directory does not exist, create it
          if (!userData.exists()) 
          {    
              try
              {
                  userData.mkdir();
              }
              catch(Exception e)
              {}
          }

            
   
    }

    
            
    /**
     * @param args the command line arguments
     */
    
   
    public static void main(String[] args) {
        launch(args);
          
        
        //File f = new File(args[0]);
        
    }
    
}




//the hollowed-out trunk/branch of a tree...the kind that was sometimes used to/for
//she shivered involuntarily, glancing over her shoulder

//if you leave aside...I will s y
//Sit still couldn't believe that she had voluntarily agreed to a voc, temporary or permanent...but she was admittedly intrigued
//as her body seemed to waste away, losing more and more str by the day

//depressing ending/epilogue: as if he didn't even recog
//de'ne thing
//the denizens by now having grown accustomed to regular feats of shs
//OCC inspired bunny (highly charged scene, really- it's all about coherence)

//some other chapters: little by little, dat one

/*

Essentially, all user content will be in two files.

These two files, both of which are auto-generated by ALH, should be saved to a folder in MOG by default/by the path specified by the user.

Should there be a "save" button attached to the primary box? Should their be an undo button?
...perhaps use a check box to enable/disable ctrl+z & ctrl+y
...and a label that indicates whether there is anything to undo/redo

The "Insert" Box:
should NOT automatically save any content until it is manually inserted into the primary box using the "insert"
button attached to it 

The "Plot Bunnies Go Here" Box:
should automatically save any content in the box (ie. saved on exit)

The "Primary" Box:

Aside from the buttons to turn the pages, the UI will consist only of a [there will only be a]
single button ie. the "load document/Open file" button attached to the primary box. 
(The insert box will have a single button as well). By default, the contents of the loaded document
will be inserted at the end of the master document, which is/will be generated automatically if it doesn't already  
exist. If no file is loaded, the master doc can still be edited by means of selecting a chapter from the sidebar.
Chapters can be easily reordered using the sidebar (clicking and dragging them up and down), 
and both the table of contents, as well as the contents of the chapters will be shifted accordingly.
IF the master document is open (typically after some editing), and the "load document" button is pressed,
all changes to that section of the master document will be saved, and the screen will clear and 
instantly replace the contents in the window with the first page of the loaded document 
(which has now been taped to the end of the master document...so you can think of it as having the program
instantly 'scroll down')...ie. the master document will be open at all times,
in that sense. Also note that none of the loaded documents are ever really modified/tampered with in any way.
The program should recognize anything in bold as a delineation between chapters, and if the chapters are numbered,
should automatically reorder them accordingly, unless manually rearranged by the user. All changes to the master doc
will be saved on exit. The primary window will have ctrlx, ctrlc, & ctrlv enabled by default*/

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 *
 *the thick panang curry paste can double as a cucumber dipping sauce :D
*/
//she had to rework some of her    to compensate for the loss in her, as well as the loss of her left arm
//Cheapened by words/an exp that she had no desire to cheapen by words

//GIL
//TUOBL
//LISTPFITU





















       // stage.setOpacity(0);
        
      
       // stage.hide();
        
       // stage.setStage(stage);
  //      LoginManager loginManager = new LoginManager(scene);
  //  loginManager.showLoginScreen();
 
   //     initializeLoginForm(Stage stage);
        
        
         
                
                //initializeLoginForm();
                
    //    stage.hide();
        
        
        
        
        
        /*Parent root = FXMLLoader.load(getClass().getResource("FXMLDocument.fxml"));
        
        Scene scene = new Scene(root);
        
        stage.setScene(scene);
        
        if(FXMLDocumentController.showStage == true)
        {
            
            stage.show();
        }*/
        
        //return stage;
        //if it exists, the master document should be loaded by default
        
        //if it does not exist, the master document should be created- creates the master document
        
        //if it exists, the Author's Muse/Musings document should be loaded by default
        
        //if it does not exist, the Musings document should be created
        
        //the menu should be initialized here
